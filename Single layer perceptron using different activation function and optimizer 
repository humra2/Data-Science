{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyPTwfSd38YyEy+8c73cxDiN",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/humra2/Data-Science/blob/main/Single%20layer%20perceptron%20using%20different%20activation%20function%20and%20optimizer%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "EzuyEFFHJDkw"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the MNIST dataset\n",
        "(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n",
        "\n",
        "# Normalize the data to [0, 1]\n",
        "x_train = x_train / 255.0\n",
        "x_test = x_test / 255.0\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mPgEmPsJJIdN",
        "outputId": "0b4fb513-ac7a-49d6-d50b-ba86884c98fe"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Flatten the images\n",
        "x_train = x_train.reshape(-1, 28*28)\n",
        "x_test = x_test.reshape(-1, 28*28)\n"
      ],
      "metadata": {
        "id": "4YvNY6IAJT0j"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Build the SLP model\n",
        "model = tf.keras.Sequential([\n",
        "    tf.keras.layers.Dense(10, input_dim=784, activation='softmax')  # 10 classes, softmax activation\n",
        "])\n",
        "\n",
        "# Compile the model\n",
        "model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DdO-LuBuJnkr",
        "outputId": "b8f9f2e4-64fe-408c-c5a8-26bd12d319fc"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model\n",
        "model.fit(x_train, y_train, epochs=5)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1K-WBN-qJsWT",
        "outputId": "36cfd633-e46a-4a0a-de70-ffbc2f6cc294"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.8083 - loss: 0.7322\n",
            "Epoch 2/5\n",
            "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 3ms/step - accuracy: 0.9146 - loss: 0.3045\n",
            "Epoch 3/5\n",
            "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 3ms/step - accuracy: 0.9203 - loss: 0.2855\n",
            "Epoch 4/5\n",
            "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - accuracy: 0.9249 - loss: 0.2686\n",
            "Epoch 5/5\n",
            "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 3ms/step - accuracy: 0.9272 - loss: 0.2643\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x78c00ec55650>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the model\n",
        "test_loss, test_acc = model.evaluate(x_test, y_test)\n",
        "print(f'Test accuracy: {test_acc}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sPTf4n_IJw2C",
        "outputId": "9a2e3289-3cc3-43a0-cb39-e3c37c6bbf5d"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9134 - loss: 0.3069\n",
            "Test accuracy: 0.9243000149726868\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Make predictions\n",
        "predictions = model.predict(x_test)\n",
        "\n",
        "# Show the predicted label for the first test sample\n",
        "print(f\"Predicted label for the first test sample: {np.argmax(predictions[0])}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FKw5A5T5J58y",
        "outputId": "903ecce2-5e98-432e-bc9b-58a6acb533f1"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step\n",
            "Predicted label for the first test sample: 7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# List of activation functions and optimizers to experiment with\n",
        "activation_functions = ['relu', 'sigmoid', 'tanh']\n",
        "optimizers = ['adam', 'sgd', 'rmsprop']\n",
        "\n",
        "results = {}\n"
      ],
      "metadata": {
        "id": "2JnHVRlxJ_CP"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Loop over different combinations of activation functions and optimizers\n",
        "for activation in activation_functions:\n",
        "    for optimizer in optimizers:\n",
        "        print(f\"Training with activation={activation} and optimizer={optimizer}\")\n",
        "\n",
        "        # Build the model with the current combination of activation and optimizer\n",
        "        model = tf.keras.Sequential([\n",
        "            tf.keras.layers.Dense(10, input_dim=784, activation=activation)  # Single layer, 10 classes\n",
        "        ])\n",
        "\n",
        "        model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "        # Train the model\n",
        "        model.fit(x_train, y_train, epochs=5, verbose=0)\n",
        "\n",
        "\n",
        "         # Evaluate the model\n",
        "        test_loss, test_acc = model.evaluate(x_test, y_test, verbose=0)\n",
        "\n",
        "        # Save the result\n",
        "        results[(activation, optimizer)] = test_acc\n",
        "        print(f\"Test accuracy: {test_acc}\")\n",
        "\n",
        "# Print the results\n",
        "print(\"\\nSummary of results:\")\n",
        "for (activation, optimizer), accuracy in results.items():\n",
        "    print(f\"Activation: {activation}, Optimizer: {optimizer} -> Test Accuracy: {accuracy}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k7YLbZsdK_2l",
        "outputId": "9ce3f3fb-fb8d-472c-c75e-96a8e984b00b"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training with activation=relu and optimizer=adam\n",
            "Test accuracy: 0.09799999743700027\n",
            "Training with activation=relu and optimizer=sgd\n",
            "Test accuracy: 0.10859999805688858\n",
            "Training with activation=relu and optimizer=rmsprop\n",
            "Test accuracy: 0.210099995136261\n",
            "Training with activation=sigmoid and optimizer=adam\n",
            "Test accuracy: 0.921500027179718\n",
            "Training with activation=sigmoid and optimizer=sgd\n",
            "Test accuracy: 0.9088000059127808\n",
            "Training with activation=sigmoid and optimizer=rmsprop\n",
            "Test accuracy: 0.9248999953269958\n",
            "Training with activation=tanh and optimizer=adam\n",
            "Test accuracy: 0.25859999656677246\n",
            "Training with activation=tanh and optimizer=sgd\n",
            "Test accuracy: 0.09839999675750732\n",
            "Training with activation=tanh and optimizer=rmsprop\n",
            "Test accuracy: 0.4311000108718872\n",
            "\n",
            "Summary of results:\n",
            "Activation: relu, Optimizer: adam -> Test Accuracy: 0.09799999743700027\n",
            "Activation: relu, Optimizer: sgd -> Test Accuracy: 0.10859999805688858\n",
            "Activation: relu, Optimizer: rmsprop -> Test Accuracy: 0.210099995136261\n",
            "Activation: sigmoid, Optimizer: adam -> Test Accuracy: 0.921500027179718\n",
            "Activation: sigmoid, Optimizer: sgd -> Test Accuracy: 0.9088000059127808\n",
            "Activation: sigmoid, Optimizer: rmsprop -> Test Accuracy: 0.9248999953269958\n",
            "Activation: tanh, Optimizer: adam -> Test Accuracy: 0.25859999656677246\n",
            "Activation: tanh, Optimizer: sgd -> Test Accuracy: 0.09839999675750732\n",
            "Activation: tanh, Optimizer: rmsprop -> Test Accuracy: 0.4311000108718872\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Extract data for plotting\n",
        "activation_optimizer_pairs = list(results.keys())\n",
        "accuracies = list(results.values())\n",
        "\n",
        "# Plot\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(range(len(results)), accuracies, tick_label=[f'{a[0]}-{a[1]}' for a in activation_optimizer_pairs])\n",
        "plt.xticks(rotation=90)\n",
        "plt.xlabel('Activation - Optimizer')\n",
        "plt.ylabel('Test Accuracy')\n",
        "plt.title('Test Accuracy for Different Activation Functions and Optimizers')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 667
        },
        "id": "DgThmBOgLGR-",
        "outputId": "40a4750f-2a79-4a48-dc77-9f4a825adb79"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "0szPdq2KNKe2"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}